plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "com.palantir.docker" version "0.25.0"
}

group = 'site.iivum'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'



configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR1")
    set('dockerRegistry', 'iivum')
}

dependencies {
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.12.3'
    implementation group: 'org.json', name: 'json', version: '20180813'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.12'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.apache.commons:commons-text:1.8'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
docker {
    name "${dockerRegistry}/${rootProject.name}"

    tag 'latest', "${dockerRegistry}/library/${rootProject.name}:latest"
    tag 'release', "${dockerRegistry}/library/${rootProject.name}:${version}"
    dockerfile file('Dockerfile')
    files tasks.bootJar.outputs
    buildArgs(['JAR_FILE': bootJar.archiveFileName.get()])
}